global !p

def port_def(snip):
	text = snip.v.text.split("\n")
	result = ''
	text = list(filter(None, text))
	list_len = len(text)
	for content in text:
		content_with_no_space = content.strip()
		dir_info = content_with_no_space[0]
		variable = content_with_no_space[1:]
		variable_width = "".join(re.findall(r'\d+', variable))
		variable_name  = "".join(re.findall(r'[a-zA-Z_]+\d*',variable))
		if dir_info == "i":
			if int(variable_width) == 1:
				if (text.index(content) == (list_len - 1)):
					result += f"	input {'':3} wire {'':40} {variable_name}\n"
				else:
					result += f"	input {'':3} wire {'':40} {variable_name},\n"
			else:
				if (text.index(content) == (list_len - 1)):
					result += f"	input {'':3} wire [{int(variable_width)-1:3}:0] {'':32} {variable_name}\n"
				else:
					result += f"	input {'':3} wire [{int(variable_width)-1:3}:0] {'':32} {variable_name},\n"
		elif dir_info == "o":
			if int(variable_width) == 1:
				if (text.index(content) == (list_len - 1)):
					result += f"	output {'':2} wire {'':40} {variable_name}\n"
				else:
					result += f"	output {'':2} wire {'':40} {variable_name},\n"
			else:
				if (text.index(content) == (list_len - 1)):
					result += f"	output {'':2} wire [{int(variable_width)-1:3}:0] {'':32} {variable_name}\n"
				else:
					result += f"	output {'':2} wire [{int(variable_width)-1:3}:0] {'':32} {variable_name},\n"
		else:
			result += f"{content_with_no_space}\n\t"
	return result 

endglobal

snippet port_def "port_def description"
`!p
snip.rv = port_def(snip)
`$0
endsnippet

snippet cnt "counter"
localparam                              $3;
always @(posedge clk or negedge rstn) begin:$1_cnt
	if(!rstn)begin
		$1_cnt <= $2'h0;
	end else if($1_cnt_full)begin
		$1_cnt <= $2'h0;
	end else begin
		$1_cnt <= $1_cnt + $2'h1;
	end
end
assign $1_cnt_full = $1_cnt == $3;
$0
endsnippet

snippet al_dd "always dff"
always @(posedge clk or negedge rstn) begin:$0
	if(!rstn)begin
		$1 <= $2'h0;
	end else begin
		$1 <= $3;
	end
end
endsnippet
snippet al_dd_g "always dff with clock_gating"
always @(posedge clk or negedge rstn) begin:$5
	if(!rstn)begin
		$1 <= $2'h0;
	end else if($3) begin
		$1 <= $4;
	end
end
$0
endsnippet
snippet al_dd2_g "always dff with 3 if and clock_gating"
always @(posedge clk or negedge rstn) begin:$5
	if(!rstn)begin
		$1 <= $2'h0;
	end else if($3) begin
		$1 <= $4;
	end else if($5) begin
		$1 <= $6;
	end
end
$0
endsnippet

snippet al_dd2 "always dff with 2 if"
always @(posedge clk or negedge rstn) begin:$5
	if(!rstn)begin
		$1 <= $2'h0;
	end else if($3) begin
		$1 <= $4;
	end else begin
		$1 <= $5;
	end
end
$0
endsnippet
snippet al_dd3 "always dff with 3 if"
always @(posedge clk or negedge rstn) begin:$5
	if(!rstn)begin
		$1 <= $2'h0;
	end else if($3) begin
		$1 <= $4;
	end else if($5) begin
		$1 <= $6;
	end else begin
		$1 <= $7;
	end
end
$0
endsnippet

snippet fsdb_init "fsdb_initial"
initial begin
  $fsdbDumpfile("$1.fsdb");
  $fsdbDumpvars("+all");
  $fsdbDumpSVA();
end
endsnippet

snippet clk_init "clk initial"

localparam CLK_PERIOD = 100;

initial begin
  clk  = 0;
  rstn = 0;
  #20;
  rstn = 1;
end

always #(CLK_PERIOD/2) clk = ~clk;

endsnippet
